import React, { useEffect, useState } from "react";
import CardCarro from './card_carro/CardCarro'
import styles from "./CadastroCarro.module.css";

import { BsPencilFill } from "react-icons/bs";
import { TfiTrash } from "react-icons/tfi";

const CadastroCarro = () => {
  const [formData, setFormData] = useState({
    nome: "",
    marca: "",
    modelo: "",
    placa: "",
    cor: "",
  });
  const [modelos, setModelos] = useState([]);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [showForm, setShowForm] = useState(false);

  const handleMarcaChange = (e) => {
    const newMarca = e.target.value;
    setFormData({ ...formData, marca: newMarca, modelo: "" });
  };

  useEffect(() => {
    let ignore = false;

    const fetchModelos = async () => {
      try {
        if (formData.marca) {
          const apiUrl = `https://vpic.nhtsa.dot.gov/api/vehicles/GetModelsForMake/${formData.marca}?format=json`;
          const response = await fetch(apiUrl);
          if (!response.ok) {
            throw new Error("Erro ao carregar modelos");
          }
          const data = await response.json();
          if (!ignore) {
            if (data.Results.length > 0) {
              const modelos = data.Results.map((result) => result.Model_Name);
              setModelos(modelos);
            } else {
              setModelos(["Nenhum modelo encontrado"]);
            }
          }
        } else {
          setModelos([]);
        }
      } catch (error) {
        console.error("Erro ao carregar modelos:", error);
        setModelos(["Erro ao carregar modelos"]);
      }
    };

    fetchModelos();

    return () => {
      ignore = true; // Define a flag como true ao desmontar o componente para evitar atualizações de estado após desmontagem
    };
  }, [formData.marca]);

  const handleSubmit = () => {
    setIsSubmitted(true);
    setShowForm(false);
  };

  const closeCard = () => {
    setIsSubmitted(false);
  };

  return (
    <div className="App">
      <button onClick={() => setShowForm(true)}>Preencher Formulário</button>
      {showForm && (
        <div className="form-container">
          <h2>Novo Carro</h2>
          <div>
            <label htmlFor="marca">Digite a marca do veículo:</label>
            <input
              type="text"
              id="marca"
              value={formData.marca}
              onChange={handleMarcaChange}
              placeholder="Digite a marca..."
            />
            <br />
            <br />
            <label htmlFor="modelo">Selecione o modelo do veículo:</label>
            <select
              id="modelo"
              disabled={modelos.length === 0}
              value={formData.modelo}
              onChange={(e) =>
                setFormData({ ...formData, modelo: e.target.value })
              }
            >
              {modelos.length === 0 && (
                <option value="">
                  Selecione uma marca para ver os modelos
                </option>
              )}
              {modelos.map((modelo, index) => (
                <option key={index} value={modelo}>
                  {modelo}
                </option>
              ))}
            </select>
          </div>
          <label>
            Placa:
            <input
              type="text"
              value={formData.placa}
              onChange={(e) =>
                setFormData({ ...formData, placa: e.target.value })
              }
            />
          </label>
          <label>
            Cor:
            <input
              type="text"
              value={formData.cor}
              onChange={(e) =>
                setFormData({ ...formData, cor: e.target.value })
              }
            />
          </label>
          <button onClick={handleSubmit}>Finalizar</button>
        </div>
      )}
      {isSubmitted && (
        <CardCarro
          nomeCarro={`${formData.marca} ${formData.modelo}`}
          placa={formData.placa}
          cor={formData.cor}
          closeCard={closeCard}
        />
      )}
    </div>
  );
};

export default CadastroCarro;
